# window
set-window-option -g xterm-keys on
set -g default-terminal "xterm-256color"
# set -g default-terminal "screen-256color"

# Use C-o as prefix
unbind C-b
set -g prefix C-o
bind C-o send-prefix

set -g status on
set -g bell-action any
set -g visual-bell off
set -g allow-rename off

set -g visual-activity on

set -g status-bg "#000000"
set -g status-fg "#ffffff"
setw -g window-status-current-bg "#7f0000"
setw -g window-status-current-fg white
setw -g window-status-current-attr bold
set -g pane-active-border-fg yellow
set -g escape-time 1

bind-key = copy-mode

bind-key r source-file ~/.tmux.conf \; display-message "Configuration reloaded"

# Set the current working directory based on the current pane's current
# working directory (if set; if not, use the pane's starting directory)
# when creating # new windows and splits.
bind-key c new-window -c '#{pane_current_path}'
bind-key '|' split-window -h -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'
bind-key - split-window -v -c '#{pane_current_path}'
bind-key _ split-window -v -c '#{pane_current_path}'

bind-key S command-prompt "new-session -A -c '#{pane_current_path}' -s '%%'"

# Setup 'V' to begin selection as in Vim
bind-key -t vi-copy V begin-selection
bind-key -t vi-copy y copy-pipe "pbcopy"
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# Some terminals might handle Ctrl+h wrong, which can be fixed by running:
# $ infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
# $ tic $TERM.ti

bind-key ` command-prompt -I "new-session -s "
