RED="\[\033[0;31m\]"
LIGHT_RED="\[\033[1;31m\]"
GREEN="\[\033[0;32m\]"
LIGHT_GREEN="\[\033[1;32m\]"
BROWN="\[\033[0;33m\]"
LIGHT_YELLOW="\[\033[1;33m\]"
BLUE="\[\033[0;34m\]"
LIGHT_BLUE="\[\033[1;34m\]"
MAGENTA="\[\033[0;35m\]"
LIGHT_MAGENTA="\[\033[1;35m\]"
CYAN="\[\033[0;36m\]"
LIGHT_CYAN="\[\033[1;36m\]"
GRAY="\[\033[0;37m\]"
WHITE="\[\033[1;37m\]"
RESET="\[\033[0;0m\]"
COLOR_NONE="\[\e[0m\]"

alias ls='ls --color=auto'
alias tmux='tmux -2'
export LANG="en_US.UTF-8"
export PATH=~/bin:$PATH
export HISTCONTROL=ignorespace:ignoredups
source /usr/share/git/completion/git-completion.bash

if [ "$TERM" == "xterm" ]; then
  export TERM=xterm-256color
fi

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Detect whether the current directory is a subversion repository.
function is_svn_repository {
  CURDIR="`pwd`"
  while [[ "$CURDIR" != "/" && "$CURDIR" != "." && "$CURDIR" != "" ]]; do
    SVNDIR="$CURDIR/.svn"
    if [ -d "$SVNDIR" ]; then
      return 1
    fi
    CURDIR=`dirname "${CURDIR}"`
  done
  return 0
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${LIGHT_GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${LIGHT_YELLOW}"
  elif [[ ${git_status} =~ "Changes not staged" ]]; then
    state="${LIGHT_RED}"
  elif [[ ${git_status} =~ "Untracked files" ]]; then
    state="${LIGHT_CYAN}"
  else
    state="${LIGHT_RED}"
  fi
  
  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi
  
  branch="<untitled>"
  # Get the name of the branch.
  branch_pattern="^On branch ([^${IFS}]*)"    
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH="${state}(${branch})${remote}${COLOR_NONE} "
}

# Determine the branch information for this subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function set_svn_branch {
  # Capture the output of the "svn status" command.
  svn_info=$(svn info 2> /dev/null | egrep '^URL: ')

  # Get the name of the branch.
  branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
  trunk_pattern="^URL: .*/trunk(/.*)?$"
  if [[ ${svn_info} =~ $branch_pattern ]]; then
    branch="${BASH_REMATCH[2]}"
    tag_pattern="^URL: .*/(tags)/([^/]+)"
    if [[ ${svn_info} =~ $tag_pattern ]]; then
	branch="$LIGHT_RED($branch)"
    else
	branch="$LIGHT_GREEN($branch)"
    fi
  elif [[ ${svn_info} =~ $trunk_pattern ]]; then
    branch="$LIGHT_YELLOW(trunk)"
  else
    branch=''
  fi

  # Set the final branch string.
  BRANCH="${branch}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
    PROMPT_SYMBOL="\$${COLOR_NONE}"
  else
    PROMPT_SYMBOL="\$${COLOR_NONE}"
    # PROMPT_SYMBOL="${RED}\$${COLOR_NONE}"
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the 
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    is_svn_repository
    if [ $? -eq 1 ] ; then
      set_svn_branch
    else
      BRANCH=''
    fi
  fi

  # Set the bash prompt variable.
  export PS1="$RESET$LIGHT_GREEN\u@\h$RESET:$LIGHT_BLUE\w ${BRANCH}${COLOR_NONE}${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

if [[ -f ~/.bashrc_local ]];then
    . ~/.bashrc_local
fi

