

coloratom () {
    local off=$1 atom=$2
    if [[ $atom[1] == [[:upper:]] ]]; then
        off=$(( $off + 60 ))
    fi
    echo $(( $off + $colorcode[${(L)atom}] ))
}
colorword () {
    local fg=$1 bg=$2 att=$3
    local -a s
    if [ -n "$fg" ]; then
        s+=$(coloratom 30 $fg)
    fi
    if [ -n "$bg" ]; then
        s+=$(coloratom 40 $bg)
    fi
    if [ -n "$att" ]; then
        s+=$attcode[$att]
    fi
    echo "%{"$'\e['${(j:;:)s}m"%}"
    #echo "\[\e033[1;37m\]"
}

is_git_repository () {
    git branch > /dev/null 2>&1
}

set_git_branch () {
  local -A pc
    pc=(${(kv)prompt_colors})
    local git_status="$(git status 2> /dev/null)"
    local state=""

    if [[ ${git_status} =~ "working tree clean" ]]; then
        state="$pc[git_clean_branch]"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="$pc[git_uncommitted_changes]"
    elif [[ ${git_status} =~ "Changes not staged" ]]; then
        state="$pc[git_unstaged_changes]"
    elif [[ ${git_status} =~ "Untracked files" ]]; then
        state="$pc[git_untracked_files]"
    else
        state="$pc[git_unclean_branch]"
    fi

  local branch="<untitled>"
  local name="`git symbolic-ref -q HEAD`"
  if [ $? -eq 0 ];then
    if [[ $name == refs/(heads|tags)/* ]];then
        name=${name#refs/(heads|tags)/}
    fi
  else
    name="`git name-rev --name-only --no-undefined --always HEAD`"
    if [ $? -ne 0 ];then
        return 1
    elif [[ $name == remotes/* ]];then
        name=${name#remotes/}
    fi
  fi
  branch="${name}"
    echo " ${state}(${branch})$pc[reset]"
}

prompt_dbi_setup () {
    local verbose=
    typeset -A colorcode
    colorcode[black]=0
    colorcode[red]=1
    colorcode[green]=2
    colorcode[yellow]=3
    colorcode[blue]=4
    colorcode[magenta]=5
    colorcode[cyan]=6
    colorcode[white]=7
    #colorcode[purple]=8
    colorcode[default]=9
    colorcode[.]=colorcode[default]
    colorcode[purple]=10
    colorcode[purple]=11
    colorcode[purple]=12
    colorcode[purple]=13
    colorcode[purple]=14
    #colorcode[purple]=15

    typeset -A attcode
    attcode[none]=00
    attcode[bold]=01
    attcode[faint]=02
    attcode[standout]=03
    attcode[underline]=04
    attcode[blink]=05
    attcode[reverse]=07
    attcode[conceal]=08
    attcode[normal]=22
    attcode[no-standout]=23
    attcode[no-underline]=24
    attcode[no-blink]=25
    attcode[no-reverse]=27
    attcode[no-conceal]=28
    local -A pc
    pc[divider]='black'
    pc[host]='Green'
    pc[#]='Yellow'
    for cn in ${(k)pc}; do
       pc[${cn}]=$(colorword $pc[$cn])
    done
    pc[reset]=$(colorword . . 00)
    pc[user]=$(colorword Green)
    pc[shortpath]=$(colorword Blue . bold)
    pc[git_clean_branch]=$(colorword Green . bold)
    pc[git_uncommitted_changes]=$(colorword Yellow . bold)
    pc[git_unstaged_changes]=$(colorword Red . bold)
    pc[git_untracked_files]=$(colorword Cyan . bold)
    pc[git_unclean_branch]=$(colorword magenta . bold)

    typeset -Ag prompt_colors
    prompt_colors=(${(kv)pc})
    PROMPT=""

    #POMPT+="$pc[divider]\$(repeat \$COLUMNS printf '-')$pc[reset]"

    if [ $verbose ]; then
        PROMPT+="$pc[user]%n$pc[reset]"
        PROMPT+="@$pc[host]%m$pc[reset]"
    fi
    PROMPT+=":$pc[shortpath]%3~$pc[reset]"
    PROMPT+="\$(set_scm)"
    PROMPT+=" $pc[default]\$ $pc[reset]"
    export PROMPT
}

set_scm () {
    if $(is_git_repository) ; then
        set_git_branch
    fi
}

prompt_dbi_setup

